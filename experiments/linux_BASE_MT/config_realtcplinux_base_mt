target=de.learnlib.ralib.sul.tcp.TCPAdapterSUL
# server alphabet
#inputs=ACCEPT()+\
#  LISTEN()+\
#  CLOSECONNECTION()+\
#  NIL()+\
#  IA(java.lang.Long:long,java.lang.Long:long)+\
#  IS(java.lang.Long:long,java.lang.Long:long)+\
#  ISA(java.lang.Long:long,java.lang.Long:long)+\
#  IFA(java.lang.Long:long,java.lang.Long:long)+\
#  IR(java.lang.Long:long,java.lang.Long:long)
#outputs=OTIMEOUT()+\
#  OA(java.lang.Long:long,java.lang.Long:long)+\
#  OFA(java.lang.Long:long,java.lang.Long:long)+\
#  OS(java.lang.Long:long,java.lang.Long:long)+\
#  OSA(java.lang.Long:long,java.lang.Long:long)+\
#  OR(java.lang.Long:long,java.lang.Long:long)+\
#  OAR(java.lang.Long:long,java.lang.Long:long)

#client alphabet
inputs=IConnect()+\
  ISA(java.lang.Long:slong,java.lang.Long:clong)+\
  !IS(java.lang.Long:long,java.lang.Long:long)+\
  IR(java.lang.Long:slong,java.lang.Long:clong)+\
  IRA(java.lang.Long:slong,java.lang.Long:clong)+\
  !IA(java.lang.Long:slong,java.lang.Long:clong)+\
  !SEND()+\
  !IFA(java.lang.Long:slong,java.lang.Long:clong)+\
  CLOSE()
  
outputs=OTIMEOUT()+\
  OA(java.lang.Long:clong,java.lang.Long:slong)+\
  OFA(java.lang.Long:clong,java.lang.Long:slong)+\
  OS(java.lang.Long:clong,java.lang.Long:slong)+\
  OSA(java.lang.Long:clong,java.lang.Long:slong)+\
  OR(java.lang.Long:clong,java.lang.Long:slong)+\
  OPA(java.lang.Long:clong,java.lang.Long:slong)+\
  ORA(java.lang.Long:clong,java.lang.Long:slong)

solver=z3
logging.level=SEVERE
logging.file=trees.log
max.time.millis=100000000
use.ceopt=true
use.suffixopt=true
use.fresh=true
use.rwalk=true
target.port=18001
cache.load=../ralib/tcp-linux-cache_BASE_MT.ser
cache.dump=../ralib/tcp-linux-cache_BASE_MT.ser
stats.cache=true
#debug.traces=IConnect[] OS[100[clong], 0[slong]] ISA[2920000[slong], 100[clong] + 1[clong]] OA[100[clong] + 1[clong], 2920000[slong] + 1[slong]] CLOSE[] OFA[100[clong] + 1[clong], 2920000[slong] + 1[slong]] ISA[5840000[slong], 200[clong]] OA[100[clong] + 1[clong] + 1[clong], 2920000[slong] + 1[slong]] IRA[8760000[slong], 300[clong]] OTIMEOUT[] IA[2920000[slong], 100[clong] + 1[clong]] OTIMEOUT[] IA[2934601[slong] ( 2920000[slong] + 1[slong] + 1[slong]:2920000[slong] + 29200[slong]), 100[clong] + 1[clong] + 1[clong]]
#cache.exclude=IConnect[] OS[100[clong], 0[slong]] ISA[2920000[slong], 100[clong] + 1[clong]] OA[100[clong] + 1[clong], 2920000[slong] + 1[slong]] IR[2920000[slong], 100[clong]] OTIMEOUT[] IA[2934601[slong] ( 2920000[slong] + 1[slong] + 1[slong]:2920000[slong] + 29200[slong]), 200[clong]] OTIMEOUT[] IA[2920000[slong] + 1[slong], 100[clong]] OTIMEOUT[] CLOSE[]
#cache.exclude=IConnect[] OS[100[clong], 0[slong]] ISA[2920000[slong], 100[clong] + 1[clong]] OA[100[clong] + 1[clong], 2920000[slong] + 1[slong]] IR[5840000[slong], 100[clong] + 1[clong]] OTIMEOUT[] IR[2920000[slong] + 1[slong], 100[clong]] OTIMEOUT[] CLOSE[]
#cache.exclude= IConnect[] OS[100[clong], 0[slong]] ISA[2920000[slong], 100[clong] + 1[clong]] OA[100[clong] + 1[clong], 2920000[slong] + 1[slong]] IConnect[] OTIMEOUT[] ISA[2920000[slong] + 1[slong], 100[clong] + 1[clong]] OA[100[clong] + 1[clong], 2920000[slong] + 1[slong]] ISA[2920000[slong] + 1[slong], 200[clong]] OA[100[clong] + 1[clong], 2920000[slong] + 1[slong]] CLOSE[]
#cache.exclude=IConnect[] OS[100[clong], 0[slong]] ISA[2920000[slong], 100[clong] + 1[clong]] OA[100[clong] + 1[clong], 2920000[slong] + 1[slong]] IConnect[] OTIMEOUT[] ISA[2920000[slong] + 1[slong] + 29200[slong], 100[clong] + 1[clong] + 1[clong]] OA[100[clong] + 1[clong], 2920000[slong] + 1[slong]] ISA[2920000[slong] + 1[slong], 90[clong] ( :100[clong])] OA[100[clong] + 1[clong], 2920000[slong] + 1[slong]] ISA[3241202[slong] ( 2920000[slong] + 1[slong] + 29200[slong] + 1[slong]:), 100[clong]] OA[100[clong] + 1[clong], 2920000[slong] + 1[slong]] CLOSE[]
cache.tests=true
stats.cache=true
sul.instances=3
sul.factory=de.learnlib.ralib.sul.tcp.TCPSULFactory
export.model=true
eqoracle=rwalkfromstate
random.seed=1
rwalkfromstate.prob.history=0.3
rwalkfromstate.prob.register=0.4
rwalkfromstate.prob.related=0.2
rwalkfromstate.prob.reset=0.1
rwalkfromstate.max.depth=10
rwalkfromstate.max.runs=15000
rwalkfromstate.reset.count=false
rwalkfromstate.draw.uniform=true
teachers=clong:de.learnlib.ralib.tools.theories.SumCLongInequalityTheory+slong:de.learnlib.ralib.tools.theories.SumCLongInequalityTheory
constants=[{"type":"clong","value":"0"}, {"type":"slong","value":"0"}]
constants.sumc=[{"type":"clong","value":"1"}, {"type":"slong","value":"1"}, {"type":"slong","value":"29200"}]
